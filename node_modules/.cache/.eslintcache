[{"/Users/isogain/Desktop/Everything/compsci/project/src/index.js":"1","/Users/isogain/Desktop/Everything/compsci/project/src/App.js":"2","/Users/isogain/Desktop/Everything/compsci/project/src/reportWebVitals.js":"3","/Users/isogain/Desktop/Everything/compsci/project/src/components/RadarChart.js":"4","/Users/isogain/Desktop/Everything/compsci/project/src/components/CharStats.js":"5"},{"size":501,"mtime":1640257869425,"results":"6","hashOfConfig":"7"},{"size":13959,"mtime":1646560930135,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1632795695815,"results":"9","hashOfConfig":"7"},{"size":1335,"mtime":1646303038207,"results":"10","hashOfConfig":"7"},{"size":59,"mtime":1646403907059,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bixrds",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":1,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/isogain/Desktop/Everything/compsci/project/src/index.js",[],[],"/Users/isogain/Desktop/Everything/compsci/project/src/App.js",["28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],[],"import { useState, useEffect, useRef } from 'react';\nimport React from 'react';\nimport './App.css';\nimport ReactDOM from 'react-dom'\nimport {useTrail, animated, useTransition, useSpring, useChain, config, useSpringRef} from 'react-spring'\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport {store, useGlobalState} from 'state-pool';\nimport { isPropertySignature } from 'typescript';\nimport RadarChart from './components/RadarChart';\nimport CharStats from './components/CharStats';\n\n\n//Class component for error handling because class components are useful when we have a requirement with the state of the component and its hard to do with a functional component\nclass ErrorBoundary extends React.Component {\n  constructor(props) { \n    super(props);\n    this.state = {hasError: false};\n  }\n\n  static getDerivedStatefromError(error) {\n      //Updates render so that the next render will show fallback UI\n      return {hasError: true};\n  }\n\n  componentDidCatch(error, errorinfo) {\n    //Error reporting service\n    console.log(error, errorinfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1> Hey you did something wrong again </h1>\n    }\n\n    return this.props.children\n  }\n}\n\n//https://dev.to/yezyilomo/you-can-definitely-use-global-variables-to-manage-global-state-in-react-17l3 \n// For global counter ( State - pool)\nfunction handleSubmit(event) {\n  event.preventDefault();\n}\n\nstore.setState(\"count\",0);\nstore.setState(\"tasks\",0);\nstore.setState(\"attacks\",0);\nstore.setState(\"exp\",10);\nstore.setState(\"workout\",0);\nstore.setState(\"name\",0);\n\n\nfunction Experience(props) { \n  const [experience, setExp] = useGlobalState(\"exp\");\n  let incrementExp = (e) => {\n    setExp(experience+5)\n  }\n  let level = Math.floor(experience)/10\n  return(\n    <div>\n      <h2>Level:{level}</h2>\n    </div>\n  )\n}\n\n\n// Each successful monster gives 5 EXP. \n// It takes 10 EXP to get one level so EXP / 10 = Level\n\n\n  \n\nfunction TasksComplete(props) {\n  const [task,setTask] = useGlobalState(\"tasks\");\n  const [workout, setWorkout] = useGlobalState(\"workout\");\n  let inrementTask = (e) => {\n    setTask(task+1)\n    setWorkout(workout+2)\n  }\n    return(\n      <div>\n        <h4> You have completed a total of {task} tasks! </h4>\n        <br/>\n      </div>\n  )\n}\n\nfunction Attacks(props) {\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n  let incrementAttack = (e) => {\n    setAttack(attack+2)\n  }\n    return(\n      <div>\n        <h4> You have {attack} attacks left! </h4>\n        <br/>\n      </div>\n    )\n}\nfunction CreateCounter(props) {\n  const [count, setCount] = useGlobalState(\"count\");\n\n  let incrementCount = (e) => {\n    setCount(count+1)\n  }\n\n  return (\n    <div>\n      <h4> You have completed a total of {count} tasks! </h4>\n      <br/>\n    </div>\n  )\n}\n\n\n//https://blog.logrocket.com/building-inline-editable-ui-in-react/\n// Component accept text, laceholder values and also pass what type of Input - \n// input, textarea so that we can use it for styling accordingly\nconst Editable = ({\n  text,\n  type,\n  placeholder,\n  children,\n  ... props\n}) => {\n\n   // Manage the state whether to show the label or the input box. By default, label will be shown.\n  const [isEditing, setEditing] = useState(false);\n// Event handler while pressing any key while editing\n  const handleKeyDown = (event, type) => {\n    // Handle when key is pressed\n  };\n\n  /*\n- It will display a label is `isEditing` is false\n- It will display the children (input or textarea) if `isEditing` is true\n- when input `onBlur`, we will set the default non edit mode\n*/\n\nreturn (\n  <section {...props}>\n    {isEditing ? (\n      <div\n        onBlur={() => setEditing(false)}\n        onKeyDown={e => handleKeyDown(e, type)}\n      >\n        {children}\n      </div>\n    ) : (\n      <div\n        onClick={() => setEditing(true)}\n      >\n        <span>\n          {text || placeholder || \"Editable content\"}\n        </span>\n      </div>\n    )}\n  </section>\n);\n};\n\nfunction Username() {\n  const [name, setName] = useGlobalState(\"name\" );\n  \n  return (\n    <Editable\n    text={name}\n    placeholder=\"Username\"\n    type=\"input\"\n  >\n    <textarea\n      type = \"text\"\n      name = \"name\"\n      placeholder = \"Username\"\n      value ={name}\n      onChange={e=> setName(e.target.value)}\n      />\n  </Editable>\n  );\n}\n\nfunction NewItemForm({onSubmit}) {\n  const [subject, setSubject] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [count, setCount] = useGlobalState(\"count\");\n  const [workout, setWorkout] = useState(0);\n  const [health, setHealth] = useState(0);\n  const [study, setStudy] = useState(0);\n  \n\n    let incrementWork = (e) => {\n      if (type === \"Workout\") {\n      setWorkout(workout+1)\n      }\n    }\n\n    let incrementHealth = (e) => {\n      if (type === \"Health\") {\n      setHealth(health+1)\n      }\n    }\n\n    let incrementStudy = (e) => {\n      if (type === \"Study\") {\n      setStudy(study+1)\n      }\n    }\n\n    let incrementCount = (e) => {\n      setCount(count+1)\n      setWorkout(workout-workout)\n      setHealth(health-health)\n      setStudy(study-study)\n    }\n\n\n\n\n    CharStats[0] = CharStats[0] + workout\n\n    CharStats[1] = CharStats[1] + health\n\n    CharStats[2] = CharStats[2] + study\n\n\n\n  return(\n      <div>\n          <fieldset className=\"NewItem\">\n            <legend>Create a new item</legend>\n\n            {/* This is the subject textbox */}\n            <label htmlFor=\"subj\"> - Subject</label>\n            <input id=\"subj\" value={subject} onChange={e=>{\n              setSubject(e.target.value);\n            }}/>\n\n            {/* This is the subject textbox */}\n            <label htmlFor=\"desc\"> - Description</label>\n            <textarea id=\"desc\" type=\"text\" value={description} rows={5} onChange={e=>{\n              setDescription(e.target.value);\n            }}/>\n\n            {/* This is for the drop down menu for the type - I have to link this in with the character stats and the graph later . */}\n            <label htmlFor=\"type\"> - Type</label>\n            <select name=\"type\" onChange={e=>{\n              setType(e.target.value);\n\n            }}>\n              <option value=\"\" selected>Type of Task</option>\n              <option value=\"Workout\"  >Workout</option>\n              <option value=\"Health\" >Health</option>\n              <option value=\"Study\" >Study</option>\n            </select>\n\n            {/*   This is the action button */}\n\n            <label htmlFor=\"create\"/>\n            <button id=\"create\" onClick={e=>{\n              onSubmit( {subject:subject, description:description, type:type} );\n              setSubject(\"\");\n              setDescription(\"\");\n              setType(\"\");\n              incrementCount();\n              incrementWork();\n              incrementHealth();\n              incrementStudy();\n             \n            }} >Create item</button>\n          </fieldset>\n      </div>\n  )\n}\n\nfunction ShowItem({key, item, onDelete}) {\n  const [task, setTask] = useGlobalState(\"tasks\");\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n  const [number, setNumber] = useState(0);\n\n  let incrementNumber = (e) => {\n    setNumber(number+1)\n  }\n  let incrementTask = (e) => {\n    setTask(task+1)\n  }\n\n  let incrementAttack = (e) => {\n    setAttack(attack+2)\n  }\n\n  CharStats[3] = (task+1)/((number+1)/2)\n\n  return(\n    <div className=\"ShowItem\">\n      <div className=\"left\"> - Subject</div>\n      <div className=\"right\">{item.subject}</div>\n      <div className=\"left\"> - Description</div>\n      <div className=\"right\">{item.description}</div>\n      <div className=\"left\"> - Type</div>\n      <div className=\"right\">{item.type}</div>\n      <button className=\"Green\" onClick={()=>{ incrementNumber(); onDelete(key); incrementTask(item.type); incrementAttack();}}> x</button>\n    </div>\n  )\n}\n\n//Deleting items using array splices\nfunction ItemsList() {\n  \n  const [items, setItems] = useState([]);\n  const addItem = (item) => {\n    console.log(\"addItem received:\", item);\n    setItems([...items, item]);\n  }\n\n  const onDelete = (i) => {\n    items.splice(i,1)\n    setItems([...items]);\n  }\n\n  console.log(items);\n  return(\n    <h4>\n    <div className=\"ItemsList\">\n      {\n        items.map((val, i) =>{\n          return(<ShowItem key={i} item={val} onDelete={onDelete}/> )\n        })\n      }\n      <NewItemForm onSubmit={addItem}/>\n    </div>\n    </h4>\n  )\n}\n\n\n\nfunction SmallLine() {\n  return <h6 className=\"InLine\">|</h6>\n}\n\n{/*\n  The function above is the symbol to represent the numerical stat of that characteristic of the user \n  The function below is for calculating how mnay lines to display\n*/}\nfunction CharList({onSubmit}) {\n  const [workout, setWorkout] = useGlobalState(\"workout\")\n  const Currenttotal = CharStats[3]+CharStats[2]+CharStats[1]+CharStats[0];\n    let rowsWorkout = []\n    for (let i=0; i<(((CharStats[0])/Currenttotal)*100)/10; i++) {\n      rowsWorkout.push(<SmallLine key={i} />)\n    }\n    let rowsHealth = []\n    for (let i=0; i<(((CharStats[1])/Currenttotal)*100)/10; i++) {\n      rowsHealth.push(<SmallLine key={i} />)\n    }\n    let rowsStudy = []\n    for (let i=0; i<(((CharStats[2])/Currenttotal)*100)/10; i++) {\n      rowsStudy.push(<SmallLine key={i} />)\n    }\n  \n\n  return (\n\n      <div className=\"NoPadding\">\n        {/* This is the stats list, and also prints symbols that represent stats out of overall profile */}\n        <h6 className=\"Center\"> Strengths and Weaknesses (Tasks)</h6>\n        <h6>{\"- Workout [\"+ CharStats[0]+\"]\"}{rowsWorkout}</h6>\n        <h6>{\" - Health [\" + CharStats[1]+\"]\"}{rowsHealth}</h6>\n        <h6>{\" - Study [\" + CharStats[2]+\"]\"}{rowsStudy}</h6>\n\n      </div>\n  )\n}\n\n\nfunction Footer() {\n  return(\n    <div className=\"Footer\">\n      \n        <Link to='/system'>─ Profile  ─</Link>\n        <Link to='/analytics'>─  Analytics  ─</Link>\n        <Link to='/adventure'>─  Adventure  ─</Link>\n    </div>\n  )\n}\n\nfunction Intro() {\n  return(\n    <div className=\"Intro\">\n      <h4><Link to='/system'>- Welcome. Press to continue -</Link></h4>\n    </div>\n  )\n}\n\n\nfunction SystemPage() {\n  return (\n    \n    <div> \n    <h1> System</h1>\n    \n    <ErrorBoundary>\n      <div className=\"username\">\n      <Experience/>\n      <Username/>\n      </div> \n\n          {/* <a href=\"https://google.com\" target=\"_blank\" rel=\"noopener\">Open Google</a> {/* This part of the code allows for a button that links to a separate website */}\n          {/* <audio src=\"minecraft.mp3\" controls autoPlay loop></audio>  */}\n      <h2>  -  Daily Tasks  - </h2>\n      <ItemsList />\n      <h3> - - - </h3>\n      <h2>  -  Quests  - </h2>\n      <ItemsList />\n      <h3> - - - </h3>\n      <h3> - - - </h3>\n            \n    </ErrorBoundary>\n    <Footer />\n    \n\n\n    \n    \n    </div>\n\n\n\n  );\n}\n\n\nfunction DefaultPage() {\n  return(\n    <div>\n      <Intro />\n    </div>\n    \n  )\n}\n\n\nfunction AnalyticsPage() {\n  \n  return(\n    <div>\n      <h1>Analytics</h1>\n      <h2 className=\"MyStatistics\">  -   - My Statistics  -  - </h2>\n      <TasksComplete/>\n      <CharList/>\n      \n      \n      {/* for the line graph \n      for i from 0 to Table[0].length-1\n        for j from 0 to Table.length-1, return or print Table[j][i]\n      */}\n      {/* <div class=\"container\">\n        <div class=\"container__progress\" style=\"width: 40%;\">40%\n        </div>\n      </div>\n    */}\n      <RadarChart/>\n      <h3> - - - </h3>\n      <h3> - - - </h3> \n    \n      <Footer />\n    </div>\n  )\n}\n\n//Since putting it in the function made it refresh\nfunction NewMob() { \n  var word=[\"Goblin\", \"Slime\",\"Skeleton\", \"Wraith\", \"Gargoyle\", \"Golem\", \"Orc\", \"Ghouls\", \"Blood-Starved Beast\", \"Dragon\", \"Elemental\", \"Demon\"];\n  var words=word[Math.floor(Math.random()*word.length)];\n  return(\n    <h6>{words}</h6>\n  )\n}\n\nvar word=[\"Goblin\", \"Slime\",\"Skeleton\", \"Wraith\", \"Gargoyle\", \"Golem\", \"Orc\", \"Ghouls\", \"Blood-Starved Beast\", \"Dragon\", \"Elemental\", \"Demon\"];\nvar words=word[Math.floor(Math.random()*word.length)];\n\nfunction RandomMonster(props, filename, callback) {\n  // Monster Title and Description\n  var hp =[1, 3, 5, 7, 10]\n  var hps=hp[Math.floor(Math.random()*hp.length)];\n\n  const [health, setHealth] = useState(hps);\n  const [exps, setexp] = useGlobalState(\"exp\");\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n  \n\n    let incrementexp = (e) => {\n      if (health < 0) {\n        setexp(exps+5)\n      }\n    }\n\n    let decrementhealth = (e) => {\n      if (attack > 0) {\n        setHealth(health-2)\n      }\n    }\n\n  \n    let decrementAttack = (e) => {\n      if (attack > 0) {\n        setAttack(attack-1)\n      }\n    \n    }\n\n    let incrementhealth = (e) => {\n      setHealth(health+13)\n    }\n  \n  return(\n    <div> \n      {health > 0 && \n        <h2 className=\"Center\" onClick={()=>{ decrementhealth(); decrementAttack(); }}><br/>{words}<br/> HP: {health} <br/> <br/> </h2>\n      }\n\n      {health < 0 &&\n      <h2 onClick={() => {incrementexp(); incrementhealth(); }} >Congrats, you defeated the monster and earned 5 EXP! <br></br>Click again to collect! </h2>\n      }\n\n     \n\n    </div>\n  )\n}\n\n\n\nfunction AdventurePage() {\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n  const [exps, setExp] = useGlobalState(\"exp\");\n  let incrementExp = (e) => {\n    setExp(exps+5)\n  }\n  \n  return(\n    <div>\n      <h1>Adventure</h1>\n      <h6 className=\"Center\" >The monster will run away if you leave, so kill it in one go!</h6>\n      <h6 className=\"Center\"> You have {attack} attacks left! </h6>\n      <div className=\"Monsters\"  >\n       <RandomMonster />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nfunction App() {\n  return(\n    <div>\n      <Router>\n        <Routes>\n          <Route exact path=\"/system\" element={<SystemPage/>} />\n          <Route path=\"*\" element={<DefaultPage/>}/>\n          <Route path=\"/analytics\" element={<AnalyticsPage/>}/>\n          <Route path=\"/adventure\" element={<AdventurePage/>}/>\n        </Routes>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","/Users/isogain/Desktop/Everything/compsci/project/src/reportWebVitals.js",[],[],"/Users/isogain/Desktop/Everything/compsci/project/src/components/RadarChart.js",[],[],"/Users/isogain/Desktop/Everything/compsci/project/src/components/CharStats.js",[],[],{"ruleId":"53","severity":1,"message":"54","line":1,"column":20,"nodeType":"55","messageId":"56","endLine":1,"endColumn":29},{"ruleId":"53","severity":1,"message":"57","line":1,"column":31,"nodeType":"55","messageId":"56","endLine":1,"endColumn":37},{"ruleId":"53","severity":1,"message":"58","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":16},{"ruleId":"53","severity":1,"message":"59","line":5,"column":9,"nodeType":"55","messageId":"56","endLine":5,"endColumn":17},{"ruleId":"53","severity":1,"message":"60","line":5,"column":19,"nodeType":"55","messageId":"56","endLine":5,"endColumn":27},{"ruleId":"53","severity":1,"message":"61","line":5,"column":29,"nodeType":"55","messageId":"56","endLine":5,"endColumn":42},{"ruleId":"53","severity":1,"message":"62","line":5,"column":44,"nodeType":"55","messageId":"56","endLine":5,"endColumn":53},{"ruleId":"53","severity":1,"message":"63","line":5,"column":55,"nodeType":"55","messageId":"56","endLine":5,"endColumn":63},{"ruleId":"53","severity":1,"message":"64","line":5,"column":65,"nodeType":"55","messageId":"56","endLine":5,"endColumn":71},{"ruleId":"53","severity":1,"message":"65","line":5,"column":73,"nodeType":"55","messageId":"56","endLine":5,"endColumn":85},{"ruleId":"53","severity":1,"message":"66","line":8,"column":10,"nodeType":"55","messageId":"56","endLine":8,"endColumn":29},{"ruleId":"53","severity":1,"message":"67","line":41,"column":10,"nodeType":"55","messageId":"56","endLine":41,"endColumn":22},{"ruleId":"53","severity":1,"message":"68","line":55,"column":7,"nodeType":"55","messageId":"56","endLine":55,"endColumn":19},{"ruleId":"53","severity":1,"message":"69","line":76,"column":7,"nodeType":"55","messageId":"56","endLine":76,"endColumn":19},{"ruleId":"53","severity":1,"message":"70","line":88,"column":10,"nodeType":"55","messageId":"56","endLine":88,"endColumn":17},{"ruleId":"53","severity":1,"message":"71","line":90,"column":7,"nodeType":"55","messageId":"56","endLine":90,"endColumn":22},{"ruleId":"53","severity":1,"message":"72","line":100,"column":10,"nodeType":"55","messageId":"56","endLine":100,"endColumn":23},{"ruleId":"53","severity":1,"message":"73","line":103,"column":7,"nodeType":"55","messageId":"56","endLine":103,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":124,"column":6,"nodeType":"76","messageId":"77","endLine":124,"endColumn":7,"fix":"78"},{"ruleId":"79","severity":1,"message":"80","line":342,"column":1,"nodeType":"81","messageId":"82","endLine":345,"endColumn":4},{"ruleId":"53","severity":1,"message":"83","line":347,"column":10,"nodeType":"55","messageId":"56","endLine":347,"endColumn":17},{"ruleId":"53","severity":1,"message":"84","line":347,"column":19,"nodeType":"55","messageId":"56","endLine":347,"endColumn":29},{"ruleId":"53","severity":1,"message":"85","line":473,"column":10,"nodeType":"55","messageId":"56","endLine":473,"endColumn":16},{"ruleId":"53","severity":1,"message":"86","line":537,"column":18,"nodeType":"55","messageId":"56","endLine":537,"endColumn":27},{"ruleId":"53","severity":1,"message":"68","line":539,"column":7,"nodeType":"55","messageId":"56","endLine":539,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'ReactDOM' is defined but never used.","'useTrail' is defined but never used.","'animated' is defined but never used.","'useTransition' is defined but never used.","'useSpring' is defined but never used.","'useChain' is defined but never used.","'config' is defined but never used.","'useSpringRef' is defined but never used.","'isPropertySignature' is defined but never used.","'handleSubmit' is defined but never used.","'incrementExp' is assigned a value but never used.","'inrementTask' is assigned a value but never used.","'Attacks' is defined but never used.","'incrementAttack' is assigned a value but never used.","'CreateCounter' is defined but never used.","'incrementCount' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after rest property operator.","RestElement","unexpectedWhitespace",{"range":"87","text":"88"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'workout' is assigned a value but never used.","'setWorkout' is assigned a value but never used.","'NewMob' is defined but never used.","'setAttack' is assigned a value but never used.",[3090,3091],""]