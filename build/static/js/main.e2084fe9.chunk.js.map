{"version":3,"sources":["components/BarChart.js","App.js","reportWebVitals.js","index.js","../node_modules/typescript/lib sync"],"names":["BarChart","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","layout","padding","left","height","width","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","ErrorBoundary","props","state","hasError","error","errorinfo","console","log","this","children","React","Component","Experience","useGlobalState","experience","level","Math","floor","TasksComplete","task","store","setState","Date","Editable","text","placeholder","type","useState","isEditing","setEditing","onBlur","onKeyDown","e","onClick","Username","name","setName","value","onChange","target","NewItemForm","onSubmit","subject","setSubject","description","setDescription","setType","count","setCount","className","htmlFor","id","rows","selected","ShowItem","key","item","onDelete","setTask","attack","setAttack","ItemsList","items","setItems","i","splice","map","val","HelloWorld","CharList","workout","Currenttotal","Characteristics","rowsWorkout","push","rowsHealth","rowsStudy","Footer","to","Intro","length","SystemPage","DefaultPage","AnalyticsPage","word","words","random","RandomMonster","filename","callback","hp","hps","health","setHealth","exp","setexp","AdventurePage","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.e2084fe9.chunk.js","sourcesContent":["import React from 'react'\nimport {Radar} from 'react-chartjs-2'\n\nconst BarChart = () => {\n    return( \n    <div>\n        <Radar\n            data={{\n                labels: ['Workout', 'Study', 'Health', 'Productivity', 'Ambition'],\n                datasets: [\n                    {\n                        label: 'Type',\n                    },\n                    {\n                        label: 'Quantity',\n                        data: [40, 50, 20, 35, 70],\n                        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        borderWidth: 3,\n                        options: {\n                            layout: {\n                                padding: {\n                                    left: 100,\n                                }\n                            },\n                        }\n                    }\n                \n                ],\n            }}\n            height={400}\n            width={600}\n            options = {{\n                maintainAspectRatio: false,\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: true,\n                            },\n                        },\n                    ],\n                },\n            }}\n        />\n    </div>\n    )\n}\n\nexport default BarChart","import { useState, useEffect, useRef } from 'react';\nimport React from 'react';\nimport './App.css';\nimport ReactDOM from 'react-dom'\nimport {useTrail, animated, useTransition, useSpring, useChain, config, useSpringRef} from 'react-spring'\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport {store, useGlobalState} from 'state-pool';\nimport { isPropertySignature } from 'typescript';\nimport BarChart from './components/BarChart';\n\n//Class component for error handling because class components are useful when we have a requirement with the state of the component and its hard to do with a functional component\nclass ErrorBoundary extends React.Component {\n  constructor(props) { \n    super(props);\n    this.state = {hasError: false};\n  }\n\n  static getDerivedStatefromError(error) {\n      //Updates render so that the next render will show fallback UI\n      return {hasError: true};\n  }\n\n  componentDidCatch(error, errorinfo) {\n    //Error reporting service\n    console.log(error, errorinfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1> Hey you did something wrong again </h1>\n    }\n\n    return this.props.children\n  }\n}\n\n//https://dev.to/yezyilomo/you-can-definitely-use-global-variables-to-manage-global-state-in-react-17l3 \n// For global counter ( State - pool)\nfunction handleSubmit(event) {\n  event.preventDefault();\n}\n\nstore.setState(\"count\",0);\nstore.setState(\"tasks\",0);\nstore.setState(\"attacks\",0);\nstore.setState(\"exp\",10);\nstore.setState(\"workout\",0);\nstore.setState(\"name\",0);\n\nfunction Experience(props) { \n  const [experience, setExp] = useGlobalState(\"exp\");\n  let incrementExp = (e) => {\n    setExp(experience+5)\n  }\n  let level = Math.floor(experience)/10\n  return(\n    <div>\n      <h2>Level:{level}</h2>\n    </div>\n  )\n}\n\n\n// Each successful monster gives 5 EXP. \n// It takes 10 EXP to get one level so EXP / 10 = Level\n\n\n  \n\nfunction TasksComplete(props) {\n  const [task,setTask] = useGlobalState(\"tasks\");\n  const [workout, setWorkout] = useGlobalState(\"workout\");\n  let inrementTask = (e) => {\n    setTask(task+1)\n    setWorkout(workout+2)\n  }\n    return(\n      <div>\n        <h4> You have completed a total of {task} tasks! </h4>\n        <br/>\n      </div>\n  )\n}\n\nfunction Attacks(props) {\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n  let incrementAttack = (e) => {\n    setAttack(attack+2)\n  }\n    return(\n      <div>\n        <h4> You have {attack} attacks left! </h4>\n        <br/>\n      </div>\n    )\n}\nfunction CreateCounter(props) {\n  const [count, setCount] = useGlobalState(\"count\");\n\n  let incrementCount = (e) => {\n    setCount(count+1)\n  }\n\n  return (\n    <div>\n      <h4> You have completed a total of {count} tasks! </h4>\n      <br/>\n    </div>\n  )\n}\n\nlet now = new Date();\nlet d = Date(\"2021-12-07\");\n\n// Component accept text, laceholder values and also pass what type of Input - \n// input, textarea so that we can use it for styling accordingly\nconst Editable = ({\n  text,\n  type,\n  placeholder,\n  children,\n  ... props\n}) => {\n\n   // Manage the state whether to show the label or the input box. By default, label will be shown.\n  const [isEditing, setEditing] = useState(false);\n// Event handler while pressing any key while editing\n  const handleKeyDown = (event, type) => {\n    // Handle when key is pressed\n  };\n\n  /*\n- It will display a label is `isEditing` is false\n- It will display the children (input or textarea) if `isEditing` is true\n- when input `onBlur`, we will set the default non edit mode\n*/\n\nreturn (\n  <section {...props}>\n    {isEditing ? (\n      <div\n        onBlur={() => setEditing(false)}\n        onKeyDown={e => handleKeyDown(e, type)}\n      >\n        {children}\n      </div>\n    ) : (\n      <div\n        onClick={() => setEditing(true)}\n      >\n        <span>\n          {text || placeholder || \"Editable content\"}\n        </span>\n      </div>\n    )}\n  </section>\n);\n};\n\nfunction Username() {\n  const [name, setName] = useGlobalState(\"name\" );\n  \n  return (\n    <Editable\n    text={name}\n    placeholder=\"Username\"\n    type=\"input\"\n  >\n    <textarea\n      type = \"text\"\n      name = \"name\"\n      placeholder = \"Username\"\n      value ={name}\n      onChange={e=> setName(e.target.value)}\n      />\n  </Editable>\n  );\n}\n\nfunction NewItemForm({onSubmit}) {\n  const [subject, setSubject] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [count, setCount] = useGlobalState(\"count\");\n\n    let incrementCount = (e) => {\n        setCount(count+1)\n    }\n  return(\n      <div>\n          <fieldset className=\"NewItem\">\n            <legend>Create a new item</legend>\n\n            {/* This is the subject textbox */}\n            <label htmlFor=\"subj\"> - Subject</label>\n            <input id=\"subj\" value={subject} onChange={e=>{\n              setSubject(e.target.value);\n            }}/>\n\n            {/* This is the subject textbox */}\n            <label htmlFor=\"desc\"> - Description</label>\n            <textarea id=\"desc\" type=\"text\" value={description} rows={5} onChange={e=>{\n              setDescription(e.target.value);\n            }}/>\n\n            {/* This is for the drop down menu for the type - I have to link this in with the character stats and the graph later . */}\n            <label htmlFor=\"type\"> - Type</label>\n            <select name=\"type\" onChange={e=>{\n              setType(e.target.value);\n\n            }}>\n              <option value=\"\" selected>Type of Task</option>\n              <option value=\"Workout\" >Workout</option>\n              <option value=\"Health\">Health</option>\n              <option value=\"Study\">Study</option>\n            </select>\n\n            {/*   This is the action button */}\n\n            <label htmlFor=\"create\"/>\n            <button id=\"create\" onClick={e=>{\n              onSubmit( {subject:subject, description:description, type:type} );\n              setSubject(\"\");\n              setDescription(\"\");\n              setType(\"\");\n              incrementCount();\n\n            }} >Create item</button>\n          </fieldset>\n      </div>\n  )\n}\n\nfunction ShowItem({key, item, onDelete}) {\n  const [task, setTask] = useGlobalState(\"tasks\");\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n\n    let incrementTask = (e) => {\n        setTask(task+1)\n    }\n\n    let incrementAttack = (e) => {\n      setAttack(attack+2)\n    }\n  return(\n    <div className=\"ShowItem\">\n      <div className=\"left\"> - Subject</div>\n      <div className=\"right\">{item.subject}</div>\n      <div className=\"left\"> - Description</div>\n      <div className=\"right\">{item.description}</div>\n      <div className=\"left\"> - Type</div>\n      <div className=\"right\">{item.type}</div>\n      <button className=\"Green\" className=\"App\" onClick={()=>{ onDelete(key); incrementTask(item.type); incrementAttack();}}> {/* <img className=\"plus_image\" src=\"./pngwing.com (1).png\"/>*/}x</button>\n    </div>\n  )\n}\n//Add items below not above\nfunction ItemsList() {\n  \n  const [items, setItems] = useState([]);\n  const addItem = (item) => {\n    console.log(\"addItem received:\", item);\n    setItems([...items, item]);\n  }\n\n  const onDelete = (i) => {\n    items.splice(i,1)\n    setItems([...items]);\n  }\n\n  console.log(items);\n  return(\n    <h4>\n    <div className=\"ItemsList\">\n      {\n        items.map((val, i) =>{\n          return(<ShowItem key={i} item={val} onDelete={onDelete}/> )\n        })\n      }\n      <NewItemForm onSubmit={addItem}/>\n    </div>\n    </h4>\n  )\n}\n\nfunction HelloWorld() {\n  return <h6 className=\"InLine\">|</h6>\n}\n\nfunction CharList({onSubmit}) {\n  const [workout, setWorkout] = useGlobalState(\"workout\")\n  const Currenttotal = Characteristics[1][4]+Characteristics[1][3]+Characteristics[1][2]+Characteristics[1][1]+Characteristics[1][0];\n    let rowsWorkout = []\n    for (let i=0; i<(((Characteristics[1][0])/Currenttotal)*100)/10; i++) {\n      rowsWorkout.push(<HelloWorld key={i} />)\n    }\n    let rowsHealth = []\n    for (let i=0; i<(((Characteristics[1][2])/Currenttotal)*100)/10; i++) {\n      rowsHealth.push(<HelloWorld key={i} />)\n    }\n    let rowsStudy = []\n    for (let i=0; i<(((Characteristics[1][1])/Currenttotal)*100)/10; i++) {\n      rowsStudy.push(<HelloWorld key={i} />)\n    }\n    Characteristics[1][3] = workout;\n    \n  return (\n\n      <div className=\"NoPadding\">\n        {/* This is the stats list, and also prints symbols that represent stats out of overall profile */}\n        <h6 className=\"Center\"> Strengths and Weaknesses (Tasks)</h6>\n        <h6>{\"- Workout [\"+ Characteristics[1][0]+\"]\"}{rowsWorkout}</h6>\n        <h6>{\" - Health [\" + Characteristics[1][2]+\"]\"}{rowsHealth}</h6>\n        <h6>{\" - Study [\" + Characteristics[1][1]+\"]\"}{rowsStudy}</h6>\n      \n        \n        \n\n      </div>\n  )\n}\n\n\nfunction Footer() {\n  return(\n    <div className=\"Footer\">\n      \n        <Link to='/system'>─ Profile  ─</Link>\n        <Link to='/analytics'>─  Analytics  ─</Link>\n        <Link to='/adventure'>─  Adventure  ─</Link>\n    </div>\n  )\n}\n\nfunction Intro() {\n  return(\n    <div className=\"Intro\">\n      <h4><Link to='/system'>- Welcome. Press to continue -</Link></h4>\n    </div>\n  )\n}\n\n\n\n{/* linked list? */}\nlet Characteristics = [\n  ['Workout', 'Study', 'Health', 'Productivity', 'Efficiency'],\n  [40, 50, 20, 10, 3]\n];\n\n\n{/* For the CHarts.js bit and the detailing statistics, use this\n      for i from 0 to Table[0].length -1, \n        print Table[0][i] and Table[table.length-1][i]\n        */\n  for (let i=0; i<Characteristics[0].length; i++) {\n    console.log(Characteristics[0][i], Characteristics[Characteristics.length-1][i]);\n  }\n} \n\n\n\nfunction SystemPage() {\n  return (\n    \n    <div> \n    <h1> System</h1>\n    <ErrorBoundary>\n      <div className=\"username\">\n      <Experience/>\n      <Username/>\n      </div> \n\n          {/* <a href=\"https://google.com\" target=\"_blank\" rel=\"noopener\">Open Google</a> {/* This part of the code allows for a button that links to a separate website */}\n          {/* <audio src=\"minecraft.mp3\" controls autoPlay loop></audio>  */}\n      <h2>  -  Daily Tasks  - </h2>\n      <ItemsList />\n      <h3> - - - </h3>\n      <h2>  -  Quests  - </h2>\n      <ItemsList />\n      <h3> - - - </h3>\n      <h3> - - - </h3>\n            \n    </ErrorBoundary>\n    <Footer />\n    \n\n\n    \n    \n    </div>\n\n\n\n  );\n}\n\n\nfunction DefaultPage() {\n  return(\n    <div>\n      <Intro />\n    </div>\n    \n  )\n}\n\n\nfunction AnalyticsPage() {\n  \n  return(\n    <div>\n      <h1>Analytics</h1>\n      <h2 className=\"MyStatistics\">  -   - My Statistics  -  - </h2>\n      <TasksComplete/>\n      <CharList/>\n      {/* for the line graph \n      for i from 0 to Table[0].length-1\n        for j from 0 to Table.length-1, return or print Table[j][i]\n      */}\n      {/* <div class=\"container\">\n        <div class=\"container__progress\" style=\"width: 40%;\">40%\n        </div>\n      </div>\n    */}\n      <BarChart/>\n      <h3> - - - </h3>\n      <h3> - - - </h3> \n    \n      <Footer />\n    </div>\n  )\n}\n\n//Since putting it in the function made it refresh\nfunction NewMob() { \n  var word=[\"Goblin\", \"Slime\",\"Skeleton\", \"Wraith\", \"Gargoyle\", \"Golem\", \"Orc\", \"Ghouls\", \"Blood-Starved Beast\", \"Dragon\", \"Elemental\", \"Demon\"];\n  var words=word[Math.floor(Math.random()*word.length)];\n  return(\n    <h6>{words}</h6>\n  )\n}\n\nvar word=[\"Goblin\", \"Slime\",\"Skeleton\", \"Wraith\", \"Gargoyle\", \"Golem\", \"Orc\", \"Ghouls\", \"Blood-Starved Beast\", \"Dragon\", \"Elemental\", \"Demon\"];\nvar words=word[Math.floor(Math.random()*word.length)];\n\nfunction RandomMonster(props, filename, callback) {\n  // Monster Title and Description\n  var hp =[1, 3, 5, 7, 10]\n  var hps=hp[Math.floor(Math.random()*hp.length)];\n  const [health, setHealth] = useState(hps);\n  const [exp, setexp] = useGlobalState(\"exp\");\n\n    let decrementhealth = (e) => {\n      if (attack > 0) {\n        setHealth(health-2)\n      }\n      if (health <= 0)\n        setexp(exp+5)\n        let level = Math.floor(exp)/10\n    }\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n    let decrementAttack = (e) => {\n      if (attack > 0) {\n        setAttack(attack-1)\n      }\n      if (health <=0) {\n        setexp(exp+5);\n      }\n      console.log(exp);\n    \n    }\n  \n  return(\n    <div> \n      {health > 0 && \n        <h2 className=\"Center\" onClick={()=>{ decrementhealth(); decrementAttack(); }}><br/>{words}<br/> HP: {health} <br/> <br/> </h2>\n      }\n      {health === 0 &&\n      <h2>Congrats, you defeated the monster and earned {hps} EXP! </h2>\n      }\n      {health < 0 &&\n      <h2> Congrats, you defeated the monster and earned {hps} EXP! </h2>\n      }\n\n     \n\n    </div>\n  )\n}\n\n\n {/* if (EXP < 5) {\n    var words= wordBeginner[Math.floor(Math.random()*wordBeginner.length)];\n    return(\n      <h2>{words}</h2>\n    );\n  } else if (EXP < 10) {\n      var words= wordIntermediate[Math.floor(Math.random()*wordIntermediate.length)];\n      return(\n        <h2>{words}</h2>\n      );\n  } else {\n      var words= wordExpert[Math.floor(Math.random()*wordExpert.length)];\n      return(\n        <h2>{words}</h2>\n      );\n  } \n*/}\n\n\n\nfunction AdventurePage() {\n  const [attack, setAttack] = useGlobalState(\"attacks\");\n  const [exp, setExp] = useGlobalState(\"exp\");\n  return(\n    <div>\n      <h1>Adventure</h1>\n      <h6 className=\"Center\">The monster will run away if you leave, so kill it in one go! {exp}</h6>\n      <h6 className=\"Center\"> You have {attack} attacks left! </h6>\n      <div className=\"Monsters\">\n       <RandomMonster/>\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nfunction App() {\n  return(\n    <div>\n      <Router>\n        <Routes>\n          \n          <Route exact path=\"/system\" element={<SystemPage/>} />\n          <Route path=\"*\" element={<DefaultPage/>}/>\n          <Route path=\"/analytics\" element={<AnalyticsPage/>}/>\n          <Route path=\"/adventure\" element={<AdventurePage/>}/>\n        </Routes>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 57;"],"sourceRoot":""}