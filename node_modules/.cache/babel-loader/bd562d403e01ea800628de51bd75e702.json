{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.store = exports.GlobalStateStore = void 0;\n\nvar GlobalState_1 = require(\"./GlobalState\");\n\nvar GlobalStateStore = function () {\n  function GlobalStateStore() {\n    this.value = {};\n    this.subscribers = [];\n    this.LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME = 1000;\n  }\n\n  GlobalStateStore.prototype.subscribe = function (itemToSubscribe) {\n    if (this.subscribers.indexOf(itemToSubscribe) > -1) {\n      // Already subscribed\n      return;\n    } // Subscribe a component to this store\n\n\n    this.subscribers.push(itemToSubscribe);\n  };\n\n  GlobalStateStore.prototype.unsubscribe = function (itemToUnsubscribe) {\n    this.subscribers = this.subscribers.filter(function (subscriber) {\n      return subscriber !== itemToUnsubscribe;\n    });\n  };\n\n  GlobalStateStore.prototype.onStoreUpdate = function (event) {\n    this.subscribers.forEach(function (subscriber) {\n      subscriber(event);\n    });\n  };\n\n  GlobalStateStore.prototype.getStateFromLocalStorage = function (key) {\n    try {\n      var serializedState = window.localStorage.getItem(key);\n\n      if (serializedState === null) {\n        // No state saved\n        return undefined;\n      }\n\n      return JSON.parse(serializedState);\n    } catch (err) {\n      // Failed to load state\n      return undefined;\n    }\n  };\n\n  GlobalStateStore.prototype.saveStateToLocalStorage = function (key, state) {\n    try {\n      var serializedState = JSON.stringify(state);\n      window.localStorage.setItem(key, serializedState);\n    } catch (_a) {// Ignore write errors\n    }\n  };\n\n  GlobalStateStore.prototype.deleteStateFromLocalStorage = function (key) {\n    return window.localStorage.removeItem(key);\n  };\n\n  GlobalStateStore.prototype.setState = function (key, initialValue, _a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {\n      persist: false\n    } : _a,\n        persist = _b.persist;\n\n    if (persist) {\n      // Load state from localStorage\n      var savedState = this.getStateFromLocalStorage(key);\n\n      if (savedState !== undefined) {\n        // Use savedState as the initialValue\n        initialValue = savedState;\n      } else {\n        // No need to debounce this because it's executed only once\n        this.saveStateToLocalStorage(key, initialValue);\n      }\n    } // Timer for debounce\n\n\n    var timerId = null;\n\n    var onGlobalStateChange = function (newValue) {\n      // Note key, persist & timerId variables depends on the scope\n      _this.onStoreUpdate({\n        key: key,\n        action: 'update',\n        value: newValue\n      });\n\n      if (persist) {\n        // Debounce saving state to localStorage because `onGlobalStateChange`\n        // is called every time the store state changes. However, it should not\n        // be called too often because it triggers the expensive `JSON.stringify` operation.\n        clearTimeout(timerId);\n        timerId = setTimeout(function () {\n          _this.saveStateToLocalStorage(key, newValue);\n        }, _this.LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME);\n      }\n    };\n\n    onGlobalStateChange.bind(this);\n\n    var onGlobalStateDelete = function () {\n      if (persist) {\n        // Delete state from localStorage\n        _this.deleteStateFromLocalStorage(key);\n      }\n    };\n\n    onGlobalStateDelete.bind(this);\n    var observer = {\n      sendUpdateSignal: onGlobalStateChange,\n      sendDeleteSignal: onGlobalStateDelete\n    }; // Create key based global state\n\n    this.value[key] = GlobalState_1.createGlobalstate(initialValue);\n    this.value[key].subscribe(observer);\n  };\n\n  GlobalStateStore.prototype.getState = function (key, config) {\n    if (config === void 0) {\n      config = {\n        persist: false\n      };\n    }\n\n    var defaultValue = config.default;\n    var persist = config.persist; // Get key based global state\n\n    if (this.value[key] === undefined) {\n      // Global state is not found\n      if (defaultValue !== undefined) {\n        // Default value is found\n        // Create a global state and use defaultValue as the initial value\n        this.setState(key, defaultValue, {\n          persist: persist\n        });\n      } else {\n        // Global state is not found and the default value is not specified\n        var errorMsg = [\"There is no global state with the key '\" + key + \"', \", \"You are either trying to access a global \", \"state which was not created or it was deleted.\"];\n        throw TypeError(errorMsg.join(\"\"));\n      }\n    }\n\n    return this.value[key];\n  };\n\n  GlobalStateStore.prototype.clear = function (fn) {\n    // Copy store\n    var storeCopy = this.value; // Clear store\n\n    this.value = {};\n\n    if (fn) {\n      // Run store re-initialization\n      fn();\n    }\n\n    for (var key in storeCopy) {\n      // Notify subscribers to a store that a global state has been removed\n      this.onStoreUpdate({\n        key: key,\n        action: 'delete'\n      }); // Get global state to remove\n\n      var globalState = storeCopy[key]; // Rerender all components\n\n      globalState.delete();\n    }\n  };\n\n  GlobalStateStore.prototype.remove = function (globalStatekey, fn) {\n    var _this = this;\n\n    var keys = [];\n\n    if (typeof globalStatekey === 'string') {\n      keys = [globalStatekey];\n    } else {\n      keys = globalStatekey;\n    }\n\n    var globalStatesToRemove = {};\n    keys.forEach(function (key) {\n      // Copy global state to remove from a store\n      globalStatesToRemove[key] = _this.getState(key); // Remove global state from a store\n\n      delete _this.value[key];\n    });\n\n    if (fn) {\n      // Run global state re-initialization\n      fn();\n    }\n\n    for (var key in globalStatesToRemove) {\n      // Notify subscribers to a store that a global state has been removed\n      this.onStoreUpdate({\n        key: key,\n        action: 'delete'\n      }); // Get global state to delete\n\n      var globalState = globalStatesToRemove[key]; // Rerender all components\n\n      globalState.delete();\n    }\n  };\n\n  return GlobalStateStore;\n}();\n\nexports.GlobalStateStore = GlobalStateStore; // Create store for key based global state\n\nvar store = new GlobalStateStore();\nexports.store = store;","map":{"version":3,"sources":["/Users/isogain/Desktop/Everything/compsci/project/node_modules/state-pool/esm/GlobalStateStore.js"],"names":["Object","defineProperty","exports","value","store","GlobalStateStore","GlobalState_1","require","subscribers","LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME","prototype","subscribe","itemToSubscribe","indexOf","push","unsubscribe","itemToUnsubscribe","filter","subscriber","onStoreUpdate","event","forEach","getStateFromLocalStorage","key","serializedState","window","localStorage","getItem","undefined","JSON","parse","err","saveStateToLocalStorage","state","stringify","setItem","_a","deleteStateFromLocalStorage","removeItem","setState","initialValue","_this","_b","persist","savedState","timerId","onGlobalStateChange","newValue","action","clearTimeout","setTimeout","bind","onGlobalStateDelete","observer","sendUpdateSignal","sendDeleteSignal","createGlobalstate","getState","config","defaultValue","default","errorMsg","TypeError","join","clear","fn","storeCopy","globalState","delete","remove","globalStatekey","keys","globalStatesToRemove"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.store = exports.GlobalStateStore = void 0;\nvar GlobalState_1 = require(\"./GlobalState\");\nvar GlobalStateStore = /** @class */ (function () {\n    function GlobalStateStore() {\n        this.value = {};\n        this.subscribers = [];\n        this.LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME = 1000;\n    }\n    GlobalStateStore.prototype.subscribe = function (itemToSubscribe) {\n        if (this.subscribers.indexOf(itemToSubscribe) > -1) {\n            // Already subscribed\n            return;\n        }\n        // Subscribe a component to this store\n        this.subscribers.push(itemToSubscribe);\n    };\n    GlobalStateStore.prototype.unsubscribe = function (itemToUnsubscribe) {\n        this.subscribers = this.subscribers.filter(function (subscriber) { return subscriber !== itemToUnsubscribe; });\n    };\n    GlobalStateStore.prototype.onStoreUpdate = function (event) {\n        this.subscribers.forEach(function (subscriber) {\n            subscriber(event);\n        });\n    };\n    GlobalStateStore.prototype.getStateFromLocalStorage = function (key) {\n        try {\n            var serializedState = window.localStorage.getItem(key);\n            if (serializedState === null) {\n                // No state saved\n                return undefined;\n            }\n            return JSON.parse(serializedState);\n        }\n        catch (err) {\n            // Failed to load state\n            return undefined;\n        }\n    };\n    GlobalStateStore.prototype.saveStateToLocalStorage = function (key, state) {\n        try {\n            var serializedState = JSON.stringify(state);\n            window.localStorage.setItem(key, serializedState);\n        }\n        catch (_a) {\n            // Ignore write errors\n        }\n    };\n    GlobalStateStore.prototype.deleteStateFromLocalStorage = function (key) {\n        return window.localStorage.removeItem(key);\n    };\n    GlobalStateStore.prototype.setState = function (key, initialValue, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? { persist: false } : _a, persist = _b.persist;\n        if (persist) {\n            // Load state from localStorage\n            var savedState = this.getStateFromLocalStorage(key);\n            if (savedState !== undefined) {\n                // Use savedState as the initialValue\n                initialValue = savedState;\n            }\n            else {\n                // No need to debounce this because it's executed only once\n                this.saveStateToLocalStorage(key, initialValue);\n            }\n        }\n        // Timer for debounce\n        var timerId = null;\n        var onGlobalStateChange = function (newValue) {\n            // Note key, persist & timerId variables depends on the scope\n            _this.onStoreUpdate({ key: key, action: 'update', value: newValue });\n            if (persist) {\n                // Debounce saving state to localStorage because `onGlobalStateChange`\n                // is called every time the store state changes. However, it should not\n                // be called too often because it triggers the expensive `JSON.stringify` operation.\n                clearTimeout(timerId);\n                timerId = setTimeout(function () {\n                    _this.saveStateToLocalStorage(key, newValue);\n                }, _this.LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME);\n            }\n        };\n        onGlobalStateChange.bind(this);\n        var onGlobalStateDelete = function () {\n            if (persist) {\n                // Delete state from localStorage\n                _this.deleteStateFromLocalStorage(key);\n            }\n        };\n        onGlobalStateDelete.bind(this);\n        var observer = {\n            sendUpdateSignal: onGlobalStateChange,\n            sendDeleteSignal: onGlobalStateDelete\n        };\n        // Create key based global state\n        this.value[key] = GlobalState_1.createGlobalstate(initialValue);\n        this.value[key].subscribe(observer);\n    };\n    GlobalStateStore.prototype.getState = function (key, config) {\n        if (config === void 0) { config = { persist: false }; }\n        var defaultValue = config.default;\n        var persist = config.persist;\n        // Get key based global state\n        if (this.value[key] === undefined) { // Global state is not found\n            if (defaultValue !== undefined) { // Default value is found\n                // Create a global state and use defaultValue as the initial value\n                this.setState(key, defaultValue, { persist: persist });\n            }\n            else {\n                // Global state is not found and the default value is not specified\n                var errorMsg = [\n                    \"There is no global state with the key '\" + key + \"', \",\n                    \"You are either trying to access a global \",\n                    \"state which was not created or it was deleted.\"\n                ];\n                throw TypeError(errorMsg.join(\"\"));\n            }\n        }\n        return this.value[key];\n    };\n    GlobalStateStore.prototype.clear = function (fn) {\n        // Copy store\n        var storeCopy = this.value;\n        // Clear store\n        this.value = {};\n        if (fn) {\n            // Run store re-initialization\n            fn();\n        }\n        for (var key in storeCopy) {\n            // Notify subscribers to a store that a global state has been removed\n            this.onStoreUpdate({ key: key, action: 'delete' });\n            // Get global state to remove\n            var globalState = storeCopy[key];\n            // Rerender all components\n            globalState.delete();\n        }\n    };\n    GlobalStateStore.prototype.remove = function (globalStatekey, fn) {\n        var _this = this;\n        var keys = [];\n        if (typeof globalStatekey === 'string') {\n            keys = [globalStatekey];\n        }\n        else {\n            keys = globalStatekey;\n        }\n        var globalStatesToRemove = {};\n        keys.forEach(function (key) {\n            // Copy global state to remove from a store\n            globalStatesToRemove[key] = _this.getState(key);\n            // Remove global state from a store\n            delete _this.value[key];\n        });\n        if (fn) {\n            // Run global state re-initialization\n            fn();\n        }\n        for (var key in globalStatesToRemove) {\n            // Notify subscribers to a store that a global state has been removed\n            this.onStoreUpdate({ key: key, action: 'delete' });\n            // Get global state to delete\n            var globalState = globalStatesToRemove[key];\n            // Rerender all components\n            globalState.delete();\n        }\n    };\n    return GlobalStateStore;\n}());\nexports.GlobalStateStore = GlobalStateStore;\n// Create store for key based global state\nvar store = new GlobalStateStore();\nexports.store = store;\n"]},"metadata":{},"sourceType":"script"}