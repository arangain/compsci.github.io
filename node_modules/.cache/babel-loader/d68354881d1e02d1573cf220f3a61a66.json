{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGlobalState = void 0;\n\nvar immer_1 = __importDefault(require(\"immer\"));\n\nvar GlobalStateStore_1 = require(\"./GlobalStateStore\");\n\nvar useGlobalStateReducer_1 = require(\"./useGlobalStateReducer\");\n\nfunction useGlobalState(globalState, config) {\n  if (config === void 0) {\n    config = {\n      persist: true\n    };\n  }\n\n  if (typeof globalState === 'string') {\n    globalState = GlobalStateStore_1.store.getState(globalState, config);\n  }\n\n  function reducer(currentState, newState) {\n    return newState;\n  }\n\n  var _a = useGlobalStateReducer_1.useGlobalStateReducer(reducer, globalState, config),\n      state = _a[0],\n      setState = _a[1];\n\n  var globalStateValue = state;\n\n  if (config.selector && !config.patcher) {\n    globalStateValue = globalState.getValue();\n  }\n\n  function updateState(fn) {\n    var newState = immer_1.default(globalStateValue, fn);\n    setState(newState);\n  }\n\n  return [state, setState, updateState];\n}\n\nexports.useGlobalState = useGlobalState;","map":{"version":3,"sources":["/Users/isogain/Documents/GitHub/compsci.github.io/node_modules/state-pool/esm/useGlobalState.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","useGlobalState","immer_1","require","GlobalStateStore_1","useGlobalStateReducer_1","globalState","config","persist","store","getState","reducer","currentState","newState","_a","useGlobalStateReducer","state","setState","globalStateValue","selector","patcher","getValue","updateState","fn","default"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,IAAIC,OAAO,GAAGR,eAAe,CAACS,OAAO,CAAC,OAAD,CAAR,CAA7B;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,yBAAD,CAArC;;AACA,SAASF,cAAT,CAAwBK,WAAxB,EAAqCC,MAArC,EAA6C;AACzC,MAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AAA6B;;AACtD,MAAI,OAAOF,WAAP,KAAuB,QAA3B,EAAqC;AACjCA,IAAAA,WAAW,GAAGF,kBAAkB,CAACK,KAAnB,CAAyBC,QAAzB,CAAkCJ,WAAlC,EAA+CC,MAA/C,CAAd;AACH;;AACD,WAASI,OAAT,CAAiBC,YAAjB,EAA+BC,QAA/B,EAAyC;AACrC,WAAOA,QAAP;AACH;;AACD,MAAIC,EAAE,GAAGT,uBAAuB,CAACU,qBAAxB,CAA8CJ,OAA9C,EAAuDL,WAAvD,EAAoEC,MAApE,CAAT;AAAA,MAAsFS,KAAK,GAAGF,EAAE,CAAC,CAAD,CAAhG;AAAA,MAAqGG,QAAQ,GAAGH,EAAE,CAAC,CAAD,CAAlH;;AACA,MAAII,gBAAgB,GAAGF,KAAvB;;AACA,MAAIT,MAAM,CAACY,QAAP,IAAmB,CAACZ,MAAM,CAACa,OAA/B,EAAwC;AACpCF,IAAAA,gBAAgB,GAAGZ,WAAW,CAACe,QAAZ,EAAnB;AACH;;AACD,WAASC,WAAT,CAAqBC,EAArB,EAAyB;AACrB,QAAIV,QAAQ,GAAGX,OAAO,CAACsB,OAAR,CAAgBN,gBAAhB,EAAkCK,EAAlC,CAAf;AACAN,IAAAA,QAAQ,CAACJ,QAAD,CAAR;AACH;;AACD,SAAO,CAACG,KAAD,EAAQC,QAAR,EAAkBK,WAAlB,CAAP;AACH;;AACDvB,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useGlobalState = void 0;\nvar immer_1 = __importDefault(require(\"immer\"));\nvar GlobalStateStore_1 = require(\"./GlobalStateStore\");\nvar useGlobalStateReducer_1 = require(\"./useGlobalStateReducer\");\nfunction useGlobalState(globalState, config) {\n    if (config === void 0) { config = { persist: true }; }\n    if (typeof globalState === 'string') {\n        globalState = GlobalStateStore_1.store.getState(globalState, config);\n    }\n    function reducer(currentState, newState) {\n        return newState;\n    }\n    var _a = useGlobalStateReducer_1.useGlobalStateReducer(reducer, globalState, config), state = _a[0], setState = _a[1];\n    var globalStateValue = state;\n    if (config.selector && !config.patcher) {\n        globalStateValue = globalState.getValue();\n    }\n    function updateState(fn) {\n        var newState = immer_1.default(globalStateValue, fn);\n        setState(newState);\n    }\n    return [state, setState, updateState];\n}\nexports.useGlobalState = useGlobalState;\n"]},"metadata":{},"sourceType":"script"}